gaf={
	contextPath : contextPath,
	themePath : themePath
};
jQuery(function($){
	gaf.pagination={
			
		loadPage : function(tid,formId,currentPage){
			var form=$('#'+formId);
			form.gafAppendHidden('__tid',tid);
			form.gafAppendHidden(tid+'__currentPage',currentPage);
			form.submit();
			return false;
		},
		
		changePagesize : function(tid,formId,currentPage,oldPagesize,currentPagesize,recordTotal){
			if(recordTotal<oldPagesize && currentPagesize>recordTotal) {
				return;
			}
			this.addHidden(formId,'__tid',tid);
			this.addHidden(formId,tid+'__currentPage',currentPage);
			$("#"+formId).submit();
			return false;
		}
	};
	
	gaf.validator = {
		cache :[],
		'handlers' : {
			email : function(label,val){ 
				if(val &&  !(/[a-z0-9-]{1,30}@[a-z0-9-]{1,65}.[a-z]{3}/.test(val))){
					alert("请为"+label+"输入合法的Email地址!");
					return false;
				}else { return false; }
			},
			required : function(label,val){ 
				if(!val){
					alert("请为"+label+"输入非空值!");
					return false;
				} else {
					return true; 
				}
			}
		},
		
		//fid means field id
		append : function(fid,label,handler){ 
			this.cache.push({'fid':fid,'execute':function(){ 
				   return cache[handler](label,$('#'+fid).val()); 
				}
			});
		},
		execute : function(){
			for(var i=0;i<this.cache.length;i=i+1){
				if(!this.cache[i].execute()){
					return false;
				}
			}
			return true;
		},
		clear : function(fids){
			for(var i=0;i<fids.length;i=i+1){
				for(var j=0;j<this.cache.length;j=j+1){
					if(this.cache[j].fid==fids[i]){
						this.cache.splice(j,1);
						break;
					}
				}
			}
		}
	};
	
	/**
	 *extends jQuery core
	 */
	$.fn.gafAppendHidden=function(hName,hVal){ 
		var els=this.find("input[name="+hName+"]:hidden");
		if(els.length>0) 
			els.val(hVal);
		else 
			this.append($("<input type='hidden' name='"+hName+"' value='"+hVal+"'/>"));
		return this; 
	};
	
	$.fn.gafAltRows=function(_callback){
		return this.each(function(i){
			$(this).find("tr td").each(function(i){
				$(this).mouseover(function(){
					var parent=$(this).parent();
					parent.attr("old_backgound",parent.css("background-color"));
					parent.children().css("background-color","#dddddd");
				}).mouseout(function(){
					var parent=$(this).parent();
					parent.children().css("background-color",parent.attr("old_backgound"));
				});
			});
		});
	};
	
	$.fn.gafreset=function(){
		this.find("input").not("button").each(function(){
			_this=$(this);
			if(_this.hasClass("gaf-ui-searchtip")) _this.val(_this.attr('title'));
			else _this.val('');
		});
		this.find("select").val("");
		return this;
	};
		
	$.fn.gafcombotext=function(options){
		options=$.extend({width:150,'iconCls':'','handler':function(textUI){}},options||{});
		return this.each(function(){
			var _this=$(this);
			_this.wrap($("<div class='gaf-ui-combotext'></div>").addClass(options.iconCls).width(options.width)
			.click(function(){options.handler.apply(this,[_this])})).width(options.width-22).click(function(){return false;});
		});
	};
	
	$.fn.gafsearchtool=function(options){
		options=options||{};
		var msg=options.msg || $(this).attr("msg");
		options=$.extend({'iconCls':'gaf-ui-searchtool','handler':function(textUI){
			var text=textUI.val();
			if(text==msg) textUI.val("");
			options.search(text==msg?"":text);
			if(text==msg) textUI.val(msg);
			return false;
		}},options);
		return this.gafcombotext(options).val(msg).focus(function(){
			if($(this).val()==msg){
				$(this).val("");
			}
		}).blur(function(){if(""==$(this).val()) $(this).val(msg);});
	};
	
	$.fn.gafsearchtip=function(){
		return this.each(function(){
			var _this=$(this);
			var msg=_this.attr("title");
			_this.addClass("gaf-ui-searchtip").val(msg).focus(function(){
				if(_this.val()==msg){
					_this.val("");
				}
			}).blur(function(){if(""==_this.val()) _this.val(msg);})
		});
	};
	
	$.fn.gafserialize=function(){
		var retValue={};
		$.each(this.serializeArray(),function(i,field){
			if(field.value)
				retValue[field.name]=field.value;
		});
		//Handle searchtips
		this.find(".gaf-ui-searchtip").each(function(){
			_this=$(this);
			if(_this.val()==_this.attr("title")) retValue[_this.attr('name')]="";
		});
		return retValue;
	};
	
	$.fn.gafAccessControl=function(contextPath,actionExtension,handler){
		var requestURL=contextPath+"/accessControlAction!requestPermission."+actionExtension;
		var requestData=[];
		var elements=this;
		elements.each(function(i){
			var element=$(this);
			var operationType=element.attr("operationType");
			var objectType=element.attr("objectType");
			var objectUniqueId=element.attr("objectUniqueId");
			requestData.push("{p1 :'"+operationType+"',p2: '"+objectType+"',p3 : '"+objectUniqueId+"'}");
		});
		if(!handler){
			handler=function(element,isPermitted){
				if(isPermitted) { 
					element.show(); 
				} else { 
					element.remove(); 
				}
			};
		}
		$.getJSON(requestURL,{requestData : "["+requestData.join(",")+"]"},function(result){
			$(result).each(function(i){ 
				handler($(elements[i]),result[i]); 
			});
		});
	};
	
	//jqGrid extends
	$.fn.gafjqGrid=function(options){
		var _this=this;
		options=options || {};
		var result;
		if(typeof options=='string'){
			if('reload'==options){
				var postData=arguments[1] || {};
				this.setGridParam({'postData' : postData});
				return this.trigger("reloadGrid");
			}
			result=$.fn.jqGrid[options].apply(this, $.makeArray(arguments).slice(1));
			if('filterToolbar'==options) 
				$(".ui-search-toolbar").find("input[type=text]:not(.combo-text)").addClass("gaf-ui-normal");
		}else{
			var dummyFunc=function(){},
			options=$.extend({
		   		datatype : 'xml',
		   		mtype : 'GET',
		   		gridview : true,
		   		shrinkToFit : false,
		   		xmlReader : {root:"rows", row:"row", page:"response>currentPage", total:"response>pageCount",
		   			         records:"response>recordTotal", repeatitems:false, id:"entityId"},
				altRows : true,
				altclass : 'gaf-ui-priority-secondary',
				pager : $("#jqPager"),
				rowNum : 10,
		   		rowList : [10,20,50,100,200,500],
		   		viewrecords : true,
		   		ondblClickRow : window['jqDetail']||options['jqDetail']||dummyFunc,
				height : $(window).height()-360,
				autowidth : true,
				rownumbers : true,
				multiselect : true,
				multiselectWidth: 30,
				multiboxonly : true,
				toolbar : [true,"top"] }, 
				options
			);
			var jqNavigator=options.navigator || options.pager || {id:'jqPager'};
			if(typeof jqNavigator=='object') 
				jqNavigator='#'+$(jqNavigator).attr('id');
			result=this.jqGrid(options).jqGrid('navGrid',jqNavigator,$.extend({
				search : false,
		  		edittext : "Amend",
		  		addtext : "Add",
		  		deltext : "Delete",
		  		refreshtext : "Refresh",
		  		addfunc : window['jqCreate'] || options['jqCreate'] || dummyFunc,
		  		editfunc : window['jqEdit'] || options['jqEdit'] || dummyFunc,
		  		delfunc : window['jqDelete'] || options['jqDelete'] || dummyFunc
		  	}, options.navGrid||{}));
		}
		
		return result;
	};
	
	
	//jQueryUI extends
	$.fn.gafdatebox=function(options){
		options=$.extend({
			width : 100,
			changeMonth: true,
			changeYear: true,
			showOn: 'both',
			buttonImage: gaf.contextPath+'/gaf/static/img/calendar.gif',
			buttonImageOnly: true,
			showOtherMonths: true,
			selectOtherMonths: true,
			showWeek: true, 
			dateFormat:'yy-mm-dd',
			firstDay: 1,
			onClose: function(dateText, inst) { inst.input.focusout();}
		}, options||{});
		return this.width(options.width).datepicker(options);
	};
	
	$.fn.gafsubmitBtn=function(){
		return this.button({});
	};
	
	$.fn.gafcancelBtn=function(){
		return this.button({});
	};
	
	$.fn.gafbuttons=function(){
		this.filter('.gafsubmitBtn').gafsubmitBtn();
		this.filter(".gafcancelBtn").gafcancelBtn();
		return this;
	};
	
	$("button.gafcancelBtn").gafcancelBtn();
	$("button.gafsubmitBtn").gafsubmitBtn();
});

//gafcombobox
(function($){
	$.widget( "ui.gafcombobox", {
		options: {
			panelFloat: '',
			panelFloatValue: ''
		},
		_create: function() {
				var self = this;
				var select = this.element.hide(),
				selected = select.children( ":selected" ),
				value = selected.val() ? selected.text() : "";
				
				var options=$.extend({
				source : function(request, response ){
					var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
					response(select.children("option").map(function(){
						var text = $(this).text();
						if (this.value && ( !request.term || matcher.test(text)))
							return {
								label: text.replace(
									new RegExp(
										"(?![^&;]+;)(?!<[^<>]*)(" +
										$.ui.autocomplete.escapeRegex(request.term) +
										")(?![^<>]*>)(?![^&;]+;)", "gi"
									), "<strong>$1</strong>" ),
								value: text,
								option: this
							};
					}));
				},
				select: function( event, ui ) {
					ui.item.option.selected = true;
					select.val( ui.item.option.value );
					self._trigger( "selected", event, {
						item: ui.item.option
					});
					select.focusout();
				},
				change: function( event, ui ) {
					if (!ui.item ) {
						var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( $(this).val() ) + "$", "i" ),
							valid = false;
						select.children( "option" ).each(function() {
							if ( this.value.match( matcher ) ) {
								this.selected = valid = true;
								return false;
							}
						});
						if (!valid ) {
							// remove invalid value, as it didn't match anything
							$( this ).val( "" );
							select.val( "" );
							return false;
						}
					}
					self._trigger( "change", event,{item: ui.item.option});
				}
				}, this.options || {} );
				
				var panel=$("<div style='height:auto;padding:0;'></div>").insertAfter(select);
				if(options.panelFloat != ''&& options.panelFloatValue != ''){
					panel.css(options.panelFloat,options.panelFloatValue);
				}
				this.element.data('panel',panel);
				var input = $("<input>")
					.appendTo(panel)
					.val( value )
					.autocomplete({
						delay: 0,
						minLength: 0,
						open : function(event,ui){
							$(this).autocomplete('widget').width(input.width()+14);
						},
						source: options.source,
						select: options.select,
						change: options.change,
						position: { offset:'0 -1' }
					})
					.addClass("ui-widget ui-widget-content ui-corner-left combo-text" )
					.css({height: 25, 'border': '1px solid #d3d3d3', 'margin':0, 'vertical-align':'top'});
				
				if(options.width) 
					input.width(options.width);
				else 
					input.css('width',$(select).css('width'));
				input.data("autocomplete")._renderItem = function(ul,item ) {
					return $("<li></li>" )
						.data("item.autocomplete", item)
						.append("<a>" + item.label + "</a>" )
						.appendTo(ul);
				};
				
				$("<button type='button'>&nbsp;</button>" )
					.attr( "tabIndex", -1 )
					.attr( "title", "Show All Items" )
					.appendTo(panel)
					.button({
						icons: {
							primary: "ui-icon-triangle-1-s"
						},
						text: false
					})
					.removeClass("ui-corner-all" )
					.addClass( "ui-corner-right ui-button-icon" )
					.css({width: 18,height:24,'margin':0})
					.click(function() {
						// close if already visible
						if (input.autocomplete("widget").is( ":visible" ) ) {
							input.autocomplete("close");
							return;
						}
						// pass empty string as value to search for, displaying all results
						input.autocomplete("search","");
						input.focus();
					});
			},
			
			reset : function(){
				this.element.data('panel').find("input").val('');
			},
			
			panel:function(){
				var panel=this.element.data('panel');
				return {input:panel.find('input'),button:panel.find('button')};
			}
		});
})(jQuery);

(function($){
	$.widget( "ui.gafcomboRemotebox", {
		options: {
			dataUrl: '',
			minLength: 1,
			maxRows: 50,
			panelFloat:'',
			panelFloatValue:''
		},
		_create: function() {
				var self = this;
				var select = this.element.hide(),
				selected = select.context,
				value = selected.value ? selected.value : "";
				
				var options=$.extend({
				source : this.options.dataUrl,
				minLength: this.options.minLength,
				maxRows: this.options.maxRows,
				select: function( event, ui ) {
					selected.value = ui.item.value;
					select.val(ui.item.id);					
					self._trigger( "selected", event, {
						item: ui.item
					});
					select.focusout();

				},
				change: function( event, ui ) {
					if (!ui.item ) {
						var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( $(this).val() ) + "$", "i" ),
							valid = false;
						select.children( "option" ).each(function() {
							if ( this.value.match( matcher ) ) {
								this.selected = valid = true;
								return false;
							}
						});
						if (!valid ) {
							// remove invalid value, as it didn't match anything
							$( this ).val( "" );
							select.val( "" );
							return false;
						}
					}
					self._trigger( "change", event,{item: ui.item.option});
				}
				}, this.options || {} );
				
				var panel=$("<div style='height:auto;padding:0;'></div>").insertAfter(select);
				if(options.panelFloat != ''&& options.panelFloatValue != ''){
					panel.css(options.panelFloat,options.panelFloatValue);
				}
				this.element.data('panel',panel);
				var showLabel = select.attr("showLabel");
				if(showLabel){
					value = showLabel;
				}
				var input = $("<input>")
					.appendTo(panel)
					.val( value )
					.autocomplete({
						delay: 0,
						minLength: options.minLength,
						maxRows: options.maxRows,
						open : function(event,ui){
							$(this).autocomplete('widget').width(input.width()+14);
						},
						source: options.dataUrl,
						select: options.select,
						change: options.change,
						position: { offset:'0 -1' }
					})
					.addClass("ui-widget ui-widget-content ui-corner-left combo-text" )
					.css({height: 25, 'border': '1px solid #d3d3d3', 'margin':0, 'vertical-align':'top'});
				
				if(options.width) 
					input.width(options.width);
				else 
					input.css('width',$(select).css('width'));
				input.data("autocomplete")._renderItem = function(ul,item ) {
					return $("<li></li>" )
						.data("item.autocomplete", item)
						.append("<a>" + item.label + "</a>" )
						.appendTo(ul);
				};
				

			}
		});
})(jQuery);

//gafnumbox
(function($){
	function fixValue(target){
		var opts = $.data(target, 'gafnumbox').options;
		var val = parseFloat($(target).val()).toFixed(opts.precision);
		if (isNaN(val)){
			$(target).val('');
			return;
		}
		
		if (opts.min != null && opts.min != undefined && val < opts.min){
			$(target).val(opts.min.toFixed(opts.precision));
		} else if (opts.max != null && opts.max != undefined && val > opts.max){
			$(target).val(opts.max.toFixed(opts.precision));
		} else {
			$(target).val(val);
		}
	}
	
	function bindEvents(target){
		$(target).unbind('.gafnumbox');
		$(target).bind('keypress.gafnumbox', function(e){
			if (e.which == 45){	//-
				return true;
			} if (e.which == 46) {	//.
				return true;
			}
			else if ((e.which >= 48 && e.which <= 57 && e.ctrlKey == false && e.shiftKey == false) || e.which == 0 || e.which == 8) {
				return true;
			} else if (e.ctrlKey == true && (e.which == 99 || e.which == 118)) {
				return true;
			} else {
				return false;
			}
		}).bind('paste.gafnumbox', function(){
			if (window.clipboardData) {
				var s = clipboardData.getData('text');
				if (! /\D/.test(s)) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		}).bind('dragenter.gafnumbox', function(){
			return false;
		}).bind('blur.gafnumbox', function(){
			fixValue(target);
		});
	}
	
	function setDisabled(target, disabled){
		var opts = $.data(target, 'gafnumbox').options;
		if (disabled){
			opts.disabled = true;
			$(target).attr('disabled', true);
		} else {
			opts.disabled = false;
			$(target).removeAttr('disabled');
		}
	}
	
	$.fn.gafnumbox = function(options){
		if (typeof options == 'string'){
			switch(options){
			case 'disable':
				return this.each(function(){
					setDisabled(this, true);
				});
			case 'enable':
				return this.each(function(){
					setDisabled(this, false);
				});
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'gafnumbox');
			if (state){
				$.extend(state.options, options);
			} else {
				var t = $(this);
				state = $.data(this, 'gafnumbox', {
					options: $.extend({}, $.fn.gafnumbox.defaults, {
						disabled: (t.attr('disabled') ? true : undefined),
						min: (t.attr('min')=='0' ? 0 : parseFloat(t.attr('min')) || undefined),
						max: (t.attr('max')=='0' ? 0 : parseFloat(t.attr('max')) || undefined),
						precision: (parseInt(t.attr('precision')) || undefined)
					}, options)
				});
				t.removeAttr('disabled');
				$(this).css({imeMode:"disabled"});
			}
			
			setDisabled(this, state.options.disabled);
			bindEvents(this);
		});
	};
	
	$.fn.gafnumbox.defaults = {
		disabled: false,
		min: null,
		max: null,
		precision: 0
	};
})(jQuery);

//gafselbox
(function($){
	$.fn.gafselbox = function(options){
		var self = this;
		var safari = $.browser.safari; /* We need to check for safari to fix the input:text problem */
		/* each form */
		return this.each(function(){
			$('input:checkbox', this).gafcheckbox();
			$('input:radio', this).gafradiobox();
		});
	};
	
	$.fn.gafradiobox = function(){
		return this.each(function(){
			var $input = $(this).addClass('gafselboxHidden').wrap('<span class="gafselboxRadioWrapper gafselboxWrapper"></span>');
			var $wrapper = $input.parent();
			var $a = $('<span class="gafselboxRadio"></span>');
			$wrapper.prepend($a);
			/* Click Handler */
			$a.click(function(){
					var $input = $(this).addClass('gafselboxChecked').siblings('input').attr('checked',true);
					/* uncheck all others of same name */
					$('input:radio[name="'+ $input.attr('name') +'"]').not($input).each(function(){
						$(this).attr('checked',false).siblings('.gafselboxRadio').removeClass('gafselboxChecked');
					});
					return false;
			});
			$input.click(function(){
				if(this.checked){
					var $input = $(this).siblings('.gafselboxRadio').addClass('gafselboxChecked').end();
					/* uncheck all others of same name */
					$('input:radio[name="'+ $input.attr('name') +'"]').not($input).each(function(){
						$(this).attr('checked',false).siblings('.gafselboxRadio').removeClass('gafselboxChecked');
					});
				}
			}).focus(function(){ $a.addClass('gafselboxFocus'); }).blur(function(){ $a.removeClass('gafselboxFocus'); });
	
			/* set the default state */
			if (this.checked){ $a.addClass('gafselboxChecked'); }
		});
	};
	
	$.fn.gafcheckbox = function(){
		return this.each(function(){
			var $input = $(this).addClass('gafselboxHidden').wrap('<span class="gafselboxWrapper"></span>');
			var $wrapper = $input.parent().append('<span class="gafselboxCheckbox"></span>');
			/* Click Handler */
			var $a = $wrapper.find('.gafselboxCheckbox').click(function(){
					var $a = $(this);
					var input = $a.siblings('input')[0];
					if (input.checked===true){
						input.checked = false;
						$a.removeClass('gafselboxChecked');
					}
					else {
						input.checked = true;
						$a.addClass('gafselboxChecked');
					}
					return false;
			});
			$input.change(function(){
				if(this.checked){ $a.addClass('gafselboxChecked');}
				else { $a.removeClass('gafselboxChecked'); }
			}).focus(function(){ $a.addClass('gafselboxFocus'); }).blur(function(){ $a.removeClass('gafselboxFocus'); });
			
			/* set the default state */
			if (this.checked){$('.gafselboxCheckbox', $wrapper).addClass('gafselboxChecked');}
		});
	};
	/* Automatically apply to any forms with class gafselbox */
	$(function(){$('form.gafselbox').gafselbox();});
	
	$.fn.gafselPanel=function(options,param){
		if(typeof options=='string')
			return $.fn.gafselPanel.methods[options].call(this, param);
		
		options=$.extend({height:220,width:150,after:function(panel){},
			btnOption:{icons:{primary: "ui-icon-triangle-1-s"},text: false}},options||{});
		return this.each(function(){
			var $this=$(this);
			$(this).width(options.width).addClass("ui-widget ui-widget-content ui-corner-left combo-text" )
				.css({height: 20,'margin':0});
			var outPanel=$("<div style='height:auto;padding:0;'></div>").insertAfter(this).append(this);
			var panel=$("<div></div>").hide().appendTo($('body'))
				.width($(this).width()+18).css({'height':options.height+'px','background-color':'#fff','border':'1px solid #a6c9e2','overflow-y':'scroll'});
			var btn=$("<button type='button'>&nbsp;</button>" )
				.attr( "tabIndex", -1 )
				.appendTo(outPanel)
				.button(options.btnOption)
				.removeClass("ui-corner-all" )
				.addClass( "ui-corner-right ui-button-icon" )
				.css({width: 18,height:22,'margin':0})
			    .toggle(function(){panel.show().position({of:$this,my:'left top',at:'left bottom',offset: '0 -2'});},function(){panel.hide();});
			$(this).data('btn',btn);
			options.after.call(this,panel);
		});
	};
	
	$.fn.gafselPanel.methods={
		close : function(){
			$(this).data('btn').trigger('click');
		}
	};
})(jQuery);

//gaftabs
(function($){
	$.fn.gaftabs=function(options,params){
		if(typeof options =='string'){
			return this.tabs(options);
		}
		
		return this.each(function(){
			var children=$(this).find(">div");
			if(children.length>0){
				var ul=$("<ul></ul>").prependTo(this);
				children.each(function(){
					var title=$(this).attr('title');
					if(title){
						var randomId="TABID"+Math.round(Math.random()*1000000);
						$(this).attr('id',randomId);
						ul.append($("<li></li>").append($("<a></a>").attr('href','#'+randomId).text(title)));
					}
				});
				$(this).tabs(options);
			}
		});
	}
})(jQuery);


//gafwindow
(function($){
$.fn.gafwindow = function(o,param) {
	if (typeof o == 'string'){
		return $.fn.gafwindow.methods[o](this, param);
	}
    var defaults = {
    	remoteURL: '',
    	remoteParams : {},
    	loadComplete: function(){},
        draggable: true,
        fixedWindow: false,//overlay.playgroundFixed
        width: -1,
        height: -1,
        overlay: {
            background: '#000',
            opacity: .3,
            zIndex: 1000,
            fixed: true,
            clickToClose: false,
            destroyOnClose: false
        },
        before: function() {},
        after: function() {},
        onclose: function() {},
        rotations: 1,
        clockwise: true,
        speed: 800,
        autoplay: true,//only used by videos
        videoIframe: true,//false to use object and embed for flash (as of 2010-12-23 the YouTube Iframe embed is a beta, so there might be bugs in it)
        showRelated: true,//only used by YouTube
        autoYouTubeThumb: null,//set to '0', '1', '2', '3', or 'default' to automatically grab the YouTube thumbnail
        closeButton: '<a class="gafwindow-close" title="close" style="cursor: pointer;">Close</a>',
        wrapHTML: '<div id="gafwindow-inner"></div>',
        beforeHTML: '<div class="gafwindow-controlbar"><span class="gafwindow-title"></span></div>',
        afterHTML: '',
        verticalCenter: true,
        forceImageFade: false,
        yabbadabbadoo: false//take the red pill, take the blue pill
    }

    o = o || {}
    if(o.overlay === false) {
        o.overlay = {}
        o.overlay.overlay = false;
    }
    if(o.overlay) {
        o.overlay = $.extend(defaults.overlay, o.overlay);
    }
    o = $.extend(defaults, o);
    o.overlay.playgroundFixed = o.fixedWindow;
    o.overlay.onclose = function(){
    	if(o.onclose){
    		o.onclose();
    	}
    	$('#gafwindow').remove();
    };
	
    var loaded = [], seed = Math.round(Math.random() * 10000), minus_or_plus = o.clockwise ? '+' : '-';
    return this.each(function(){
    	var that = this;
    	$(this).css({width:'auto','min-width': (o.width==-1?500:o.width)+'px'});
    	//$(this).css({height:'auto','min-height':(o.height==-1?350:o.height)+'px'});
    	$(this).css({height:(o.height==-1?350:o.height)+'px'});
    	$(this).css({overflow:'auto'});
    	$(this).css({overflowX:'hidden'});
    	o.overlay.html = $('<div id="gafwindow"></div>').append(this);
    	if(typeof o.before == 'function') {
    		o.before.call(this);
    	}
    	
    	$(document.body).overlayPlayground(o.overlay);
    	if(!o.fixedWindow) {
    		$('body > .overlayPlaygroundPlayground').css({
    			top: $(window).scrollTop() + 'px'
    		});
    	}
    	
    	$('#gafwindow >*').wrapAll(o.wrapHTML);
    	var beforeWidget=$(o.beforeHTML);
    	beforeWidget.prepend($(o.closeButton).click(function(){
    		$(this).gafwindow('close');
    	}));
    	beforeWidget.find("> .gafwindow-title").text(this.title||o.title);
    	$('#gafwindow').prepend(beforeWidget);
    	var afterWidget=$(o.afterHTML);
    	$('#gafwindow').append(afterWidget);
    	$('#gafwindow').width(o.width);
    	$('#gafwindow').css({
            marginTop: '-' + ($('#gafwindow').outerHeight() / 2) + 'px',
            marginLeft: '-' + ($('#gafwindow').outerWidth() / 2) + 'px'
        });
    	    	
    	function _do_after() {
    		$('#gafwindow')[0].style.MozTransform = 'none';//if we don't remove this attribute, Firefox won't display video.  We don't need it any more anyhow...
    		$('#gafwindow')[0].style.WebkitTransform = 'none';//so we'll do it for webkit too
    		$('#gafwindow')[0].style.transform = 'none';//and we'll do it to the regular transform just in case the next FF has this problem
		}
		
		function _set_draggable() {
			//only works if there's a gafwindow-controlbar and draggable option is set to true
            if(!o.draggable || $('#gafwindow .gafwindow-controlbar').length == 0) return;
            var defaultMousedown = true, startX, startY, windowStartX, windowStartY, drag = false;
            $('#gafwindow .gafwindow-controlbar').mousedown(function(e) {
                if(defaultMousedown) {
                    startX = e.pageX;
                    startY = e.pageY;
                    if($('#gafwindow')[0].style.top && $('#gafwindow')[0].style.left) {
                        windowStartX = Math.round(parseFloat($('#gafwindow').css('left').replace(/px/, '')));
                        windowStartY = Math.round(parseFloat($('#gafwindow').css('top').replace(/px/, '')));
                    }
                    else {
                        windowStartX = Math.round($('body > .overlayPlaygroundPlayground').width() / 2);
                        windowStartY = Math.round($('body > .overlayPlaygroundPlayground').height() / 2);
                    }
                    drag = true;
                }
                defaultMousedown = true;
            });
                
            $('#gafwindow .gafwindow-controlbar .gafwindow-close').mousedown(function() {
                defaultMousedown = false;
            });
            $(document.body).mousemove(function(e) {
                if(drag) {
                    var moveX = e.pageX - startX, moveY = e.pageY - startY,
                    windowMoveX = windowStartX + moveX, windowMoveY = windowStartY + moveY;
                    $('#gafwindow').css({
                        left: windowMoveX + 'px',
                        top: windowMoveY + 'px'
                    });
                }
            });
            $(window).mouseup(function() {
                drag = false;
            });
            $('#gafwindow .gafwindow-controlbar').mouseup(function() {
                drag = false;//IE7-IE8 doesn't detect when attached to the window/body in some cases
            });
        }
        if(typeof o.after == 'function') {
            _do_after();
            o.after.call(this);
            _set_draggable.call(this);
        }
        
        if(o.remoteURL!='' && o.remoteURL.length>0){
        	$(this).append($("<div id='gafwindow-image-loading'>loading...</div>"))
        		.load(o.remoteURL,o.remoteParams,function(responseText,status,XMLHttpRequest){
        			o.loadComplete.call(this,responseText,status,XMLHttpRequest);
        	});
        }
        return false;
    });
}

$.fn.gafwindow.methods={
	close:function(){
		$(document.body).overlayPlayground('close');
		return false;
	}
}
$.gafwindow=function(options){ return $("<div id='gafwindow-content'></div>").gafwindow(options);}
$.gafmessage=function(msg,options){
	options=$.extend({autoClose:true,title:'System Information',width:500,height:150,overlay:{opacity:0}},options||{});
	$("<div id='gafwindow-content'></div>").append($('<div></div').css({height:options.height-20}).text(msg))
		.append($('<div class="gaf-ui-window-toolbar"><div>')
			//.append($('<button type="">Close</button>')
				//.button({icons:{primary: 'ui-icon-circle-close'}})
					//.click(function(){$.gafwindow('close');}))
				)
		.gafwindow(options);
	//if(options.autoClose)
	//	setTimeout(function(){$.gafwindow('close');},10000);
}

$.fn.overlayPlayground = function(o){
    var defaults = {
        background: '#000',
        opacity: .75,
        zIndex: 1000,
        fixed: true,
        playgroundFixed: false,
        html: null,
        overlay: true,
        open: true,
        destroyOnClose: false,
        onclose: null
    }
    var modifyContents = true;
    if (o == 'close') o = {open: false};
    if (o == 'open') {
        o = {open: true};
        modifyContents = false;
    }
    o = $.extend(defaults, o);

    if(typeof o.onclose == 'function') {
        $.fn.overlayPlayground.onclose = o.onclose;
    }
    else if(typeof $.fn.overlayPlayground.onclose == 'function') {
        o.onclose = $.fn.overlayPlayground.onclose;
    }

    var ie6 = (typeof document.body.style.maxWidth == "undefined") ? true : false;
    return this.each(function(){
        if(o.open) {
            var playGroundExists = false;
            if($(this).find('> .overlayPlaygroundOverlay, > .overlayPlaygroundPlayground').length > 0) {
                playGroundExists = true;
                $(this).find('> .overlayPlaygroundOverlay, > .overlayPlaygroundPlayground').show();
            }
            
            $("#ss").text($("#ss").text()+modifyContents);
            if(!modifyContents) return;
            if(o.overlay) {
                var cssObj = {
                    opacity: o.opacity,
                    filter: 'alpha(opacity='+(o.opacity * 100)+')',
                    background: o.background,
                    zIndex: o.zIndex,
                    padding: 0,
                    margin: 0,
                    height: $(document).height() + 'px',
                    width: '100%',
                    left: 0,
                    top: 0,
                    position: 'absolute'
                }
                if(playGroundExists) {
                    $(this).find('> .overlayPlaygroundOverlay').css(cssObj);
                }
                else {
                    $('<div class="overlayPlaygroundOverlay">&nbsp;</div>').css(cssObj).appendTo(this);
                }
            }
            //these style properties are either applied to the new object or the existing one
            var cssObj2 = {
                zIndex: o.zIndex + 10,
                padding: 0,
                margin: 0,
                height: '100%',
                width: '100%',
                left: 0,
                top: 0,
                position: (ie6 || !o.playgroundFixed) ? 'absolute' : 'fixed'
            }
            if(playGroundExists) {
                $(this).find('> .overlayPlaygroundPlayground').css(cssObj2).append(o.html);
            }
            else {
                $('<div class="overlayPlaygroundPlayground"></div>').css(cssObj2).append(o.html).appendTo(this);
                if(ie6 && o.playgroundFixed) {
                    //fix IE6's lack of fixed positioning if called to do so. (maybe not best solution, but it's a diminishing browser and this is easy solution)
                    var that = this;
                    $(window).scroll(function() {
                        $(that).find('> .overlayPlaygroundPlayground').css('top', $(window).scrollTop() + 'px');
                    });
                    $(window).scroll();//simulate scroll event in case we're already down the page
                }
            }
        }
        else {
            if(!o.destroyOnClose)
                $(this).find('.overlayPlaygroundOverlay,.overlayPlaygroundPlayground').hide();
            else
                $(this).find('.overlayPlaygroundOverlay,.overlayPlaygroundPlayground').remove();
            if(typeof o.onclose == 'function')
                o.onclose.call(this);
        }
    });
}
})(jQuery);